using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;


namespace DNet.Cache
{
    public class EntityInfoCache : BaseCache<Type, EntityInfo>
    {
        protected override EntityInfo LoadData(Type key)
        {
            return GetEntityInfo(key);
        }

        protected EntityInfo GetEntityInfo(Type key)
        {
            EntityInfo entityInfo = new EntityInfo();
            entityInfo.TypeName = key.Name;
            PropertyInfo[] pinfos = key.GetProperties();
            object[] tableNameAttr = key.GetCustomAttributes(typeof(TableAttribute), true);
            if (tableNameAttr.Length > 0)
            {
                entityInfo.TableName = ((TableAttribute)tableNameAttr[0]).Name;
            }
            else
            {
                entityInfo.TableName = key.Name;
            }
            Dictionary<string, string> dicColumn = new Dictionary<string, string>();
            foreach (PropertyInfo property in pinfos)
            {
                //非列特性
                object[] notcolumnAttrs = property.GetCustomAttributes(typeof(NotColumnAttribute), true);
                if (notcolumnAttrs.Length > 0)
                {
                    continue;
                }
                //列特性
                dicColumn[property.Name] = property.Name;
                entityInfo.ColumnProperties.Add(property);
                object[] columnAttrs = property.GetCustomAttributes(typeof(ColumnAttribute), true);
                if (columnAttrs.Length > 0)
                {
                    string columnName = ((ColumnAttribute)columnAttrs[0]).Name;
                    if (!string.IsNullOrEmpty(columnName))
                    {
                        dicColumn[property.Name] = columnName;
                    }
                }
                //主键特性
                object[] keyAttrs = property.GetCustomAttributes(typeof(KeyAttribute), true);
                if (keyAttrs.Length > 0)
                {
                    bool isAutoGenerated = ((KeyAttribute)keyAttrs[0]).IsAutoGenerated;
                    if (isAutoGenerated)
                    {
                        entityInfo.AutoGeneratedKey = property.Name;
                        object[] sequenceAttribute = property.GetCustomAttributes(typeof(SequenceAttribute), true);
                        if (sequenceAttribute.Length > 0)
                        {
                            string sequenceName = ((SequenceAttribute)sequenceAttribute[0]).Name;
                            if (!string.IsNullOrEmpty(sequenceName))
                            {
                                entityInfo.SequenceName = sequenceName;
                            }
                        }
                    }
                    entityInfo.PrimaryKey.Add(property.Name);
                    entityInfo.KeyProperties.Add(property);
                }
                else
                {
                    entityInfo.NotKeyColumnProperties.Add(property);
                }
            }
            entityInfo.Columns = dicColumn;
            StringBuilder sqlBuilder = new StringBuilder();
            foreach (string columnKey in dicColumn.Keys)
            {
                sqlBuilder.AppendFormat("{2}.{0} AS {1},", dicColumn[columnKey], columnKey, entityInfo.TableName);
            }
            entityInfo.SelectFields = sqlBuilder.ToString().TrimEnd(',');
            sqlBuilder.Clear();
            return entityInfo;
        }

        /// <summary>
        /// 当缓存没有时从外部加载数据 true要重写LoadData
        /// </summary>
        public override bool IsGetExternalData
        {
            get
            {
                return true;
            }
        }
    }


    /// <summary>
    /// 实体结构信息
    /// </summary>
    [Serializable]
    public class EntityInfo
    {
        public string TypeName { get; set; }
        /// <summary>
        /// 表名
        /// </summary>
        public string TableName { get; set; }

        private List<string> primaryKey = new List<string>();

        /// <summary>
        /// 主键ID 
        /// </summary>
        public List<string> PrimaryKey
        {
            get { return primaryKey; }
            set { primaryKey = value; }
        }

        /// <summary>
        /// 自增列
        /// </summary>
        public string AutoGeneratedKey { get; set; }

        public string SequenceName { get; set; }

        private Dictionary<string, string> columns = new Dictionary<string, string>();

        /// <summary>
        /// key是特性、value是列名字
        /// </summary>
        public Dictionary<string, string> Columns
        {
            get { return columns; }
            set { columns = value; }
        }

        /// <summary>
        /// select字段
        /// </summary>
        public string SelectFields { get; set; }

        public string InsertSQL { get; set; }

        public string UpdateSQL { get; set; }

        /// <summary>
        /// 主键属性
        /// </summary>
        private List<PropertyInfo> keyProperties = new List<PropertyInfo>();

        /// <summary>
        /// 主键属性
        /// </summary>
        public List<PropertyInfo> KeyProperties
        {
            get { return keyProperties; }
            set { keyProperties = value; }
        }

        /// <summary>
        /// 列属性
        /// </summary>
        private List<PropertyInfo> columnProperties = new List<PropertyInfo>();

        /// <summary>
        /// 列属性
        /// </summary>
        public List<PropertyInfo> ColumnProperties
        {
            get { return columnProperties; }
            set { columnProperties = value; }
        }

        /// <summary>
        /// 非主键列属性
        /// </summary>
        private List<PropertyInfo> notKeyColumnProperties = new List<PropertyInfo>();

        /// <summary>
        /// 非主键列属性
        /// </summary>
        public List<PropertyInfo> NotKeyColumnProperties
        {
            get { return notKeyColumnProperties; }
            set { notKeyColumnProperties = value; }
        }


    }
}
